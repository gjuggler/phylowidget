<!--
    Ant build script for creating processing applets. Based loosely
    on Toxi's P5 build script, with many enhancements (and probably a few new bugs).
    (see http://processing.org/discourse/yabb_beta/YaBB.cgi?board=Integrate;action=display;num=1117133941 )
    
    last update : Feb. 2, 2008
    author : Gregory Jordan (phylowidget@gmail.com)
    author : Toxi (info@toxi.co.uk)
-->

<!--
This Ant task assumes a certain structure within your project directory:

[root]: The main directory. Should contain your build.xml and build.properties files.
|
|->[src] : Source code. Pretty self-explanatory; put your source here.
|->[data]: If your applet uses PApplet.openStream() to access data resources, you'll
|       want to put your data into this directory. It will ultimately be bundled
|       up in the JAR file along with all the compiled java classes.
|->[html]: Here is placed the template HTML file and any other web-related items that
|       will also end up in the applet directory. See the genHTML task (at the bottom)
|       to see what will be done to the template in order to create the finished HTML.
|->[lib] : Place the core.jar file and any other .jar libraries you're using in here.
   |    These will be copied to the applet directory and referenced from within the
   |    "archive" attribute of the <applet> tag in the resulting HTML.
   |->[opengl]: If you wish to enable opengl support, first grab the required .jar files
             from the Processing distribution and place them in this directory. Last
             I checked, they were "opengl.jar," "jogl.jar," and a bunch of "jogl-natives-XXX.jar".
-->
<project name="Processing Applet Export" default="dist" basedir=".">
	<description>
        Processing applet output script.
		http://processing.org/
    </description>

	<target name="init">
		<!-- Import properties from build.properties -->
		<property file="build.properties" />

		<!-- Check if the minimum properties are set, terminate if necessary -->
		<fail unless="project.name">Please specify a project name in build.properties.</fail>
		<fail unless="project.class">Please specify a Main class to be called (i.e. org.foo.BarApplication or somesuch).</fail>
		<fail unless="applet.width">Please specify applet.width in the build.properties file.</fail>
		<fail unless="applet.height">Please specify applet.height in the build.properties file.</fail>

		<!-- Output debug info if desired. -->
		<antcall target="outputdebug" />

		<!-- Store folder locations within named properties. -->
		<property name="src" location="src" />
		<property name="build" location="build" />
		<property name="applet" location="applet" />
		<property name="data" location="data" />
		<property name="lib" location="lib" />
		<property name="html" location="html" />

		<!-- Store the final jar and zip filenames. -->
		<property name="internal.finaljar" value="${project.name}.jar" />
		<property name="internal.sourcezip" value="${project.name}_src.zip" />
		<property name="internal.standalonezip" value="${project.name}_standalone.zip" />
		
		<condition property="cond.signjar">
			<istrue value="${signjar}" />
		</condition>
		<condition property="cond.genkey">
			<istrue value="${signjar.genkey}" />
		</condition>
		<condition property="cond.standalone">
			<istrue value="${project.standalone}" />
		</condition>
		<condition property="cond.opensource">
			<istrue value="${project.opensource}" />
		</condition>
		<condition property="cond.sourcezip">
			<istrue value="${project.sourcezip}" />
		</condition>
		<condition property="cond.opengl">
			<istrue value="${project.opengl}" />
		</condition>
		<condition property="cond.debug">
			<istrue value="${build.debug}" />
		</condition>
		<available property="cond.dataexists" file="${data}" type="dir" />
	</target>
	
	<!-- TARGET: BUILD -->
	<target name="build" depends="init" description="compile the source">
		<mkdir dir="${build}" />

		<!-- Compile the java code from ${src} into ${build} -->
		<condition property="internal.javasource" value="${project.javatarget}" else="1.4">
			<isset property="project.javatarget" />
		</condition>
		<!--<echo>
			${internal.javasource}
		</echo>-->
		<javac srcdir="${src}" destdir="${build}" source="${internal.javasource}" target="${internal.javasource}">
			<classpath>
				<fileset dir="${lib}" />
			</classpath>
		</javac>
	</target>

	<!-- TARGET: DIST -->
	<target name="dist" depends="init,clean,build,loadjars" description="generate the distribution">
		<mkdir dir="${applet}" />

		<!-- COPY THE "DATA" DIRECTORY TO THE BUILD FOLDER -->
		<antcall target="copydata" />

		<!-- IF OPEN SOURCE, COPY .JAVA FILES TO THE BUILD FOLDER -->
		<antcall target="copysource" />
		
		<!-- JAR UP THE "BUILD" DIRECTORY -->
		<jar jarfile="${applet}/${internal.finaljar}" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="${project.class}" />
			</manifest>
		</jar>

		<!-- COPY JARS FROM "LIB" TO "APPLET" -->
		<antcall target="copyjars" inheritRefs="true" />

		<!-- SIGN THIS JAR, IF NECESSARY -->
		<antcall target="signjar" />

		<!-- IF STANDALONE, MAKE A STANDALONE .ZIP -->
		<antcall target="standalone" />
		
		<!-- CREATE THE HTML FILE -->
		<antcall target="genHTML" />
		
	</target>

	<!-- TARGET: STANDALONE -->
	<target name="standalone" depends="loadjars" if="cond.standalone">
		<pathconvert pathsep=";" property="temp.pathlist" refid="jarFilesNoNatives">
			<flattenmapper />
		</pathconvert>
		<concat destfile="${applet}/${project.name}.bat">start javaw -cp ${temp.pathlist};${internal.finaljar} processing.core.PApplet ${project.class}</concat>
		<pathconvert pathsep=":" property="temp.pathlist" refid="jarFilesNoNatives">
			<flattenmapper />
		</pathconvert>
		<concat destfile="${applet}/${project.name}.sh">java -cp ${temp.pathlist}:${internal.finaljar} processing.core.PApplet ${project.class}</concat>
		<zip destfile="${applet}/${internal.standalonezip}" includes="*.jar,*.sh,*.bat" basedir="${applet}"/>
		<delete>
			<fileset dir="${applet}" includes="${project.name}.bat,${project.name}.sh"/>
		</delete>
	</target>
	
	<!-- TARGET: SOURCECOPY -->
	<target name="copysource" if="cond.opensource">
		<!-- ZIP UP OUR SOURCE -->
		<zip destfile="${applet}/${internal.sourcezip}" basedir="${src}" />
	</target>
	
	<!-- TARGET: COPYDATA -->
	<target name="copydata" if="cond.dataexists">
		<copy todir="${build}/data">
			<fileset dir="${data}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>

	<!-- TARGET: COPYJARS -->
	<target name="copyjars">
		<copy todir="${applet}" flatten="true">
			<fileset refid="jarFiles" />
		</copy>
	</target>

	<!-- TARGET: SIGNJAR -->
	<target name="signjar" depends="loadjars" if="cond.signjar">
		<antcall target="genkey" />
		<signjar alias="${signjar.alias}" storepass="${signjar.storepass}" lazy="true">
			<fileset refid="jarFiles" />
			<fileset file="${applet}/${internal.finaljar}" />
		</signjar>
	</target>

	<!-- TARGET: GENKEY -->
	<target name="genkey" if="cond.genkey">
		<genkey alias="${signjar.alias}" storepass="${signjar.storepass}">
			<dname>
				<param name="CN" value="${signjar.cn}" />
				<param name="OU" value="${signjar.ou}" />
				<param name="O" value="${signjar.o}" />
				<param name="C" value="${signjar.c}" />
			</dname>
		</genkey>
	</target>

	<!-- TARGET: GENHTML -->
	<target name="genHTML">
		<!-- Copy all non-HTML files normally. -->
		<copy todir="${applet}">
			<fileset dir="${html}">
				<include name="**/*.*" />
				<exclude name="**/*.html" />
				<exclude name="**/*.php" />
			</fileset>
		</copy>

		<!-- If using OpenGL, set the launcherClass to com.sun.opengl.util.JOGLAppletLauncher. -->
		<condition property="internal.launcherClass" value="com.sun.opengl.util.JOGLAppletLauncher" else="${project.class}">
			<istrue value="${project.opengl}" />
		</condition>

		<!-- If the applet.comments refers to a valid filename, load it up. -->
		<loadfile property="internal.appletcomments" srcFile="${applet.comments}" failonerror="false" />
		<condition property="internal.appletcomments" value="${internal.appletcomments}" else="${applet.comments}">
			<isset property="${internal.appletcomments}" />
		</condition>

		<!-- Let's be a little sneaky here: we expand out the current set
		of properties, and use the <filterchain> to automatically replace
		the property names (i.e. applet.width) with the values (i.e. 400)
		within all html files that we're copying. -->
		<copy todir="${applet}">
			<fileset dir="${html}">
				<include name="**/*.html" />
				<include name="**/*.php" />
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<!-- TARGET: CLEAN -->
	<target name="clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${applet}" includes="" />
		</delete>
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build}" includes="" />
		</delete>
	</target>

	<!-- MISCELLANEOUS OR "EXTRA" TARGETS GO HERE -->
	<!-- **************************************** -->

	<target name="outputdebug" if="cond.debug">
		<echo>
		Script Filename:	${ant.file}
		Project Home:	${basedir}
						
		Ant JVM Version:	${ant.java.version}
		Ant Version:	${ant.version}
		Ant Home:		${ant.home}
						
		Java JVM Version:	${java.vm.version}
		Java Version:	${java.version}
		Java Home: 		${java.home}
					
		OS Name:		${os.name}
		OS Version:		${os.version}
		OS Architecture:	${os.arch}
	</echo>
	</target>

	<target name="loadjars" depends="init">
		<!-- Create a fileset that includes all the library jar files. -->
		<condition property="internal.includeopengl" value="opengl/*.jar" else="">
			<istrue value="${project.opengl}" />
		</condition>
		<fileset id="jarFiles" dir="${lib}" casesensitive="no">
			<include name="*.jar" />
			<include name="${internal.includeOpengl}" />
		</fileset>
		<fileset id="jarFilesNoNatives" dir="${lib}" casesensitive="no">
			<include name="*.jar" />
			<include name="${internal.includeopengl}" />
			<exclude name="**/*native*.jar" />
		</fileset>

		<!-- Create a property that is a comma-separated list of the jarFilesNoNatives fileset. -->
		<pathconvert pathsep="," property="internal.jarlist" refid="jarFilesNoNatives">
			<flattenmapper />
		</pathconvert>
		<property name="internal.allJars" value="${internal.finaljar},${internal.jarlist}" />
		<pathconvert pathsep="','" property="temp.quotedJarList" refid="jarFilesNoNatives">
			<flattenmapper />
		</pathconvert>
		<property name="internal.quotedJars" value="'${temp.quotedJarList}','${internal.finaljar}'"/>
	</target>

	<target name="upload" depends="dist">
		<scp todir="${project.serverdest}" trust="true" failonerror="false" verbose="true">
			<fileset id="allFiles" dir="${applet}" casesensitive="no"/>
		</scp>

	</target>

</project>